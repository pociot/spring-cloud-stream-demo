spring:
  application:
    name: spring-cloud-stream-demo

management:
  endpoints:
    web:
      exposure:
        include: bindings

# default kafka binder configuration
#spring.cloud.stream.kafka.binder:
#  configuration:
#    commit.interval.mms: 100
#    default.key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
#    default.value.serde: org.apache.kafka.common.serialization.Serdes$StringSerde

spring.cloud.stream.default.producer:
  useNativeEncoding: true

#spring.cloud.stream.kafka.binder.producer-properties:
#  key.serializer: org.apache.kafka.common.serialization.StringSerializer
#  value.serializer: org.apache.kafka.common.serialization.StringSerializer

#spring.cloud.stream.kafka.binder.consumer-properties:
#  key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
#  value.deserializer: org.apache.kafka.common.serialization.StringDeserializer

# default kafka streams binder configuration
#spring.cloud.stream.kafka.streams.binder.configuration:
#  default.key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
#  default.value.serde: org.apache.kafka.common.serialization.Serdes$StringSerde


# generic binder configuration
spring.cloud.stream.bindings.input:
  destination: some-topic
#  group: inputGroup
#  content-type: application/json
#  consumer:
#    header-mode: raw
#    useNativeDecoding: true
# kafka binder configuration
#spring.cloud.stream.kafka.bindings.input:
#  consumer.configuration:
#    key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
#    value.deserializer: org.apache.kafka.common.serialization.StringDeserializer
# kafka stream binder configuration
spring.cloud.stream.kafka.streams.bindings.input:
  consumer:
    application-id: input
    use-native-decoding: true
    value-serde: org.apache.kafka.common.serialization.Serdes$StringSerde
    key-serde: org.apache.kafka.common.serialization.Serdes$StringSerde

spring.cloud.stream.bindings.secondInput:
  destination: some-topic
spring.cloud.stream.kafka.streams.bindings.secondInput:
  consumer:
    application-id: second-input
    use-native-decoding: true
    value-serde: org.apache.kafka.common.serialization.Serdes$StringSerde
    key-serde: org.apache.kafka.common.serialization.Serdes$StringSerde

spring.cloud.stream.bindings.otherOutput:
  destination: differentTopic
  producer:
    header-mode: headers
    useNativeEncoding: true
# kafka binder configuration
spring.cloud.stream.kafka.streams.bindings.otherOutput:
  producer:
    use-native-encoding: true
    value-serde: org.apache.kafka.common.serialization.Serdes$StringSerde
    key-serde: org.apache.kafka.common.serialization.Serdes$StringSerde

# generic binder configuration
spring.cloud.stream.bindings.output:
  destination: some-topic
  group: outputGroup
  producer:
    header-mode: headers
    useNativeEncoding: true
# kafka binder configuration
spring.cloud.stream.kafka.bindings.output:
  producer.configuration:
    key.serializer: org.apache.kafka.common.serialization.StringSerializer
    value.serializer: org.apache.kafka.common.serialization.StringSerializer
# kafka stream binder configuration
#spring.cloud.stream.kafka.streams.bindings.output:
#  producer:
#    value-serde: org.apache.kafka.common.serialization.Serdes$StringSerde
#    key-serde: org.apache.kafka.common.serialization.Serdes$StringSerde
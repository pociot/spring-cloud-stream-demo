spring:
  application:
    name: spring-cloud-stream-demo

management:
  endpoints:
    web:
      exposure:
        include: bindings

# default kafka binder configuration
spring.cloud.stream.kafka.binder:
  configuration:
    commit.interval.mms: 1000
    default.key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
    default.value.serde: org.apache.kafka.common.serialization.Serdes$StringSerde

# default kafka streams binder configuration
spring.cloud.stream.kafka.streams.binder.configuration:
  default.key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
  default.value.serde: org.apache.kafka.common.serialization.Serdes$StringSerde


# generic binder configuration
spring.cloud.stream.bindings.input:
  destination: some-topic
  group: firstGroup
  consumer:
    header-mode: raw
    useNativeDecoding: true
# kafka stream binder configuration
spring.cloud.stream.kafka.streams.bindings.input:
  consumer:
    value-serde: org.apache.kafka.common.serialization.Serdes$StringSerde
    key-serde: org.apache.kafka.common.serialization.Serdes$StringSerde

# generic binder configuration
spring.cloud.stream.bindings.secondInput:
  destination: some-topic
  group: secondGroup
  consumer:
    header-mode: raw
    useNativeDecoding: true
# kafka stream binder configuration
spring.cloud.stream.kafka.streams.bindings.secondInput:
  consumer:
    value-serde: org.apache.kafka.common.serialization.Serdes$StringSerde
    key-serde: org.apache.kafka.common.serialization.Serdes$StringSerde

# generic binder configuration
spring.cloud.stream.bindings.output:
  destination: some-topic
  producer:
    header-mode: raw
    useNativeEncoding: true
# kafka binder configuration
spring.cloud.stream.kafka.bindings.output:
  producer.configuration:
    key.serializer: org.apache.kafka.common.serialization.StringSerializer
    value.serializer: org.apache.kafka.common.serialization.StringSerializer